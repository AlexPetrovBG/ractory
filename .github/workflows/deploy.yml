name: Deploy Ra Factory

on:
  push:
    branches:
      - dev
      - main # Assuming 'main' is the production branch

jobs:
  deploy_dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Or the version your project uses

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-test.txt

      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check . --exit-zero
        working-directory: ./backend

      - name: Create .env file for testing
        run: |
          echo "DB_USER=rafactory_rw" > .env
          echo "DB_PASSWORD=2KMnijoXcxKgJ4RXi7UKj8RoZYqffblewJqRAioRcI" >> .env
          echo "DB_HOST=db_dev" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=rafactory_dev" >> .env
          echo "ADMIN_EMAIL=a.petrov@delice.bg" >> .env
          echo "ADMIN_PASSWORD=password" >> .env
          echo "ADMIN_NAME=System" >> .env
          echo "ADMIN_SURNAME=Admin" >> .env
        working-directory: backend/scripts

      - name: Create .env file for Docker Compose
        run: |
          echo "DB_USER=rafactory_rw" > .env
          echo "DB_PASSWORD=2KMnijoXcxKgJ4RXi7UKj8RoZYqffblewJqRAioRcI" >> .env
          echo "DB_HOST=db_dev" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=rafactory_dev" >> .env

      - name: Start services for testing
        run: docker compose --profile dev up -d db_dev api

      - name: Wait for database to be healthy
        run: |
          echo "Waiting for database to be ready..."
          echo "Checking current service status..."
          docker compose --profile dev ps
          echo "Checking database logs..."
          docker compose --profile dev logs db_dev
          echo "Waiting for database health check..."
          timeout 90 bash -c 'until docker compose --profile dev ps db_dev | grep -q "healthy"; do 
            echo "Database not healthy yet, current status:"
            docker compose --profile dev ps db_dev
            sleep 5
          done'
          echo "Database is ready!"

      - name: Debug environment variables
        run: |
          echo "Checking environment variables in API container..."
          docker compose --profile dev exec api env | grep DB_
          echo "Testing database connection..."
          docker compose --profile dev exec api python -c "
          import os
          print('DB_HOST:', os.getenv('DB_HOST'))
          print('DB_USER:', os.getenv('DB_USER'))
          print('DB_NAME:', os.getenv('DB_NAME'))
          "

      - name: Test database connectivity
        run: |
          echo "Testing database connection from API container..."
          docker compose --profile dev exec api python -c "
          import psycopg2
          import os
          try:
              conn = psycopg2.connect(
                  host=os.getenv('DB_HOST'),
                  database=os.getenv('DB_NAME'),
                  user=os.getenv('DB_USER'),
                  password=os.getenv('DB_PASSWORD'),
                  port=os.getenv('DB_PORT', '5432')
              )
              print('Database connection successful!')
              conn.close()
          except Exception as e:
              print(f'Database connection failed: {e}')
              raise
          "

      - name: Run database migrations
        run: docker compose --profile dev exec api alembic upgrade head

      - name: Seed database with initial admin user
        run: docker compose --profile dev exec api python /app/scripts/create_admin_user.py

      - name: Run pytest
        id: tests
        working-directory: backend
        run: |
          export PYTHONPATH=$(pwd)
          pytest
        env:
          API_BASE_URL: http://localhost:8000

      - name: Dump API logs on test failure
        if: steps.tests.outcome == 'failure'
        run: docker compose --profile dev logs api

      - name: Stop services
        if: always()
        run: docker compose --profile dev down

      - name: Test Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: rafactorydev.raworkshop.bg
          username: alex
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo "SSH connection test successful"

      - name: Dev deployment placeholder
        run: echo "Deploying to development..."

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Or the version your project uses

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-test.txt

      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check .
        working-directory: ./backend

      - name: Test with pytest
        run: |
          pip install pytest
          pytest
        working-directory: ./backend

      - name: Prod deployment placeholder
        run: echo "Deploying to production..." 