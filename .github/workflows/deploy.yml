name: Deploy Ra Factory

on:
  push:
    branches:
      - dev
      - main # Assuming 'main' is the production branch

jobs:
  deploy_dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Or the version your project uses

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-test.txt

      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check . --exit-zero
        working-directory: ./backend

      - name: Create .env file for testing
        run: |
          # For db_dev service
          echo "POSTGRES_DB=test_db" > .env
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          # For api service
          echo "DB_HOST=db_dev" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=test_user" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Start services for testing
        run: docker compose --profile dev up -d db_dev api

      - name: Wait for database to be healthy
        run: |
          echo "Waiting for DB..."
          for i in {1..30}; do
            if [ "$(docker compose --profile dev ps db_dev | grep -c '(healthy)')" -gt 0 ]; then
              echo "DB is healthy!"
              exit 0
            fi
            sleep 2
          done
          echo "DB did not become healthy in time."
          docker compose --profile dev logs
          exit 1

      - name: Run Database Migrations
        run: docker compose --profile dev exec api alembic -c /app/alembic.ini upgrade head
      
      - name: Run pytest
        id: tests
        working-directory: backend
        run: |
          export PYTHONPATH=$(pwd)
          pytest
        continue-on-error: true

      - name: Dump API logs on test failure
        if: ${{ steps.tests.outcome == 'failure' }}
        run: docker compose --profile dev logs api

      - name: Stop services
        if: always()
        run: docker compose --profile dev down

      - name: Test Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: rafactorydev.raworkshop.bg
          username: alex
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: echo "SSH connection test successful"

      - name: Dev deployment placeholder
        run: echo "Deploying to development..."

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Or the version your project uses

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-test.txt

      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check .
        working-directory: ./backend

      - name: Test with pytest
        run: |
          pip install pytest
          pytest
        working-directory: ./backend

      - name: Prod deployment placeholder
        run: echo "Deploying to production..." 